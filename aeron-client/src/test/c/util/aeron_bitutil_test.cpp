/*
 * Copyright 2014-2025 Real Logic Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <gtest/gtest.h>

extern "C"
{
#include "util/aeron_bitutil.h"
}

class BitutilTest : public testing::Test
{
public:
    BitutilTest() = default;
};

TEST_F(BitutilTest, shouldCountTrailingZeros64Bit)
{
    for (uint64_t i = 0; i < 64; i++)
    {
        uint64_t value = UINT64_C(1) << i;
        EXPECT_EQ(aeron_number_of_trailing_zeroes_u64(value), static_cast<int>(i));
    }
}

TEST_F(BitutilTest, shouldCheckIfValueIsAlignedCorrectly)
{
    EXPECT_TRUE(AERON_IS_ALIGNED(INT64_C(64), INT64_C(2)));
    EXPECT_TRUE(AERON_IS_ALIGNED(INT64_C(0), INT64_C(64)));
    EXPECT_TRUE(AERON_IS_ALIGNED(INT64_C(0), INT64_C(4096)));
    EXPECT_TRUE(AERON_IS_ALIGNED(INT64_C(4096), INT64_C(4096)));
    EXPECT_TRUE(AERON_IS_ALIGNED(INT64_C(17179869184), INT64_C(1073741824)));
    EXPECT_TRUE(AERON_IS_ALIGNED(UINT64_C(17179869184), INT64_C(1073741824)));
    EXPECT_TRUE(AERON_IS_ALIGNED(UINT64_C(17179869184), UINT64_C(1073741824)));
    EXPECT_TRUE(AERON_IS_ALIGNED(INT64_C(17179869184), INT64_C(4096)));
    EXPECT_FALSE(AERON_IS_ALIGNED(INT64_C(1), INT64_C(4)));
    EXPECT_FALSE(AERON_IS_ALIGNED(INT64_C(128), INT64_C(1024)));
    EXPECT_FALSE(AERON_IS_ALIGNED(INT64_C(1023), INT64_C(1024)));
    EXPECT_FALSE(AERON_IS_ALIGNED(INT64_C(1025), INT64_C(1024)));
    EXPECT_FALSE(AERON_IS_ALIGNED(INT64_C(2049), INT64_C(1024)));
    EXPECT_FALSE(AERON_IS_ALIGNED(INT64_C(2047), INT64_C(1024)));
}

TEST_F(BitutilTest, shouldAlignValue)
{
    EXPECT_EQ(INT64_C(64), AERON_ALIGN(INT64_C(64), INT64_C(2)));
    EXPECT_EQ(INT64_C(0), AERON_ALIGN(INT64_C(0), INT64_C(2)));
    EXPECT_EQ(INT64_C(0), AERON_ALIGN(INT64_C(0), INT64_C(4096)));
    EXPECT_EQ(INT64_C(4), AERON_ALIGN(INT64_C(4), INT64_C(4)));
    EXPECT_EQ(INT64_C(8), AERON_ALIGN(INT64_C(5), INT64_C(4)));
    EXPECT_EQ(INT64_C(1024), AERON_ALIGN(INT64_C(128), INT64_C(1024)));
    EXPECT_EQ(INT64_C(1024), AERON_ALIGN(INT64_C(3), INT64_C(1024)));
    EXPECT_EQ(INT64_C(17179869184), AERON_ALIGN(INT64_C(17179869184), INT64_C(1073741824)));
    EXPECT_EQ(INT64_C(17179869184), AERON_ALIGN(INT64_C(17179869184), INT64_C(4096)));
    EXPECT_EQ(UINT64_C(17179869184), AERON_ALIGN(UINT64_C(17179869184), INT64_C(1073741824)));
    EXPECT_EQ(UINT64_C(17179869184), AERON_ALIGN(UINT64_C(17179869184), INT64_C(4096)));
    EXPECT_EQ(UINT64_C(17179869184), AERON_ALIGN(UINT64_C(17179869184), UINT64_C(1073741824)));
    EXPECT_EQ(UINT64_C(17179869184), AERON_ALIGN(UINT64_C(17179869184), UINT64_C(4096)));
    EXPECT_EQ(INT64_C(17179869184), AERON_ALIGN(INT64_C(17179869184), INT64_C(2097152)));
    EXPECT_EQ(INT64_C(17181966336), AERON_ALIGN(INT64_C(17179869185), INT64_C(2097152)));
    EXPECT_EQ(INT64_C(4096), AERON_ALIGN(INT64_C(4095), INT64_C(4096)));
    EXPECT_EQ(INT64_C(8192), AERON_ALIGN(INT64_C(4097), INT64_C(4096)));
}

TEST_F(BitutilTest, shouldCheckIfValueIsPowerOfTwo)
{
    EXPECT_FALSE(AERON_IS_POWER_OF_TWO(INT64_C(-1000)));
    EXPECT_FALSE(AERON_IS_POWER_OF_TWO(INT64_C(-1024)));
    EXPECT_FALSE(AERON_IS_POWER_OF_TWO(INT64_C(0)));
    EXPECT_FALSE(AERON_IS_POWER_OF_TWO(INT64_C(19)));
    EXPECT_FALSE(AERON_IS_POWER_OF_TWO(INT64_C(1973245985794359374)));
    EXPECT_FALSE(AERON_IS_POWER_OF_TWO(INT64_MAX));
    EXPECT_FALSE(AERON_IS_POWER_OF_TWO(INT64_MIN));
    EXPECT_FALSE(AERON_IS_POWER_OF_TWO(INT32_MAX));
    EXPECT_FALSE(AERON_IS_POWER_OF_TWO(INT32_MIN));
    EXPECT_FALSE(AERON_IS_POWER_OF_TWO(UINT64_MAX));
    EXPECT_FALSE(AERON_IS_POWER_OF_TWO(UINT32_MAX));
    EXPECT_FALSE(AERON_IS_POWER_OF_TWO(UINT16_MAX));
    EXPECT_TRUE(AERON_IS_POWER_OF_TWO(INT64_C(1)));
    EXPECT_TRUE(AERON_IS_POWER_OF_TWO(INT64_C(2)));
    EXPECT_TRUE(AERON_IS_POWER_OF_TWO(INT64_C(1024) * 1024));
    EXPECT_TRUE(AERON_IS_POWER_OF_TWO(UINT64_C(1024) * 1024));
    EXPECT_TRUE(AERON_IS_POWER_OF_TWO(INT64_C(1024) * 1024 * 1024));
    EXPECT_TRUE(AERON_IS_POWER_OF_TWO(UINT64_C(1024) * 1024 * 1024));
    EXPECT_TRUE(AERON_IS_POWER_OF_TWO(UINT64_C(1024) * 1024 * 1024 * 1024));
    EXPECT_TRUE(AERON_IS_POWER_OF_TWO(INT64_C(1024) * 1024 * 1024 * 1024));
    for(int i = 0; i <= 30; i++)
    {
        EXPECT_TRUE(AERON_IS_POWER_OF_TWO(INT32_C(1) << i));
        EXPECT_TRUE(AERON_IS_POWER_OF_TWO(UINT32_C(1) << i));
    }
    for(int i = 31; i <= 62; i++)
    {
        EXPECT_TRUE(AERON_IS_POWER_OF_TWO(INT64_C(1) << i));
        EXPECT_TRUE(AERON_IS_POWER_OF_TWO(UINT64_C(1) << i));
    }
}
